import datetime
from optimus.tests.base import TestBase
from optimus.helpers.json import json_encoding
from optimus.helpers.functions import deep_sort, df_dicts_equal, results_equal


def Timestamp(t):
    return datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S")


nan = float("nan")
inf = float("inf")


class TestStringclusteringPandas(TestBase):
    config = {'engine': 'pandas'}
    dict = {('NullType', 'object'): [None, None, None, None, None, None], ('date arrival', 'object'): ['1980/04/10', '1980/04/10', '1980/04/10', '1980/04/10', '1980/04/10', '1980/04/10'], ('height(ft)', 'float64'): [-28.0, 17.0, 26.0, 13.0, nan, 300.0], ('last date seen', 'object'): ['2016/09/10', '2015/08/10', '2014/07/10', '2013/06/10', '2012/05/10', '2011/04/10'], ('last position seen', 'object'): ['19.442735,-99.201111', '10.642707,-71.612534', '37.789563,-122.400356', '33.670666,-117.841553', None, None], ('rank', 'int64'): [10, 7, 7, 8, 10, 8], ('Cybertronian', 'bool'): [True, True, True, True, True, False], ('Date Type', 'datetime64[ns]'): [Timestamp('2016-09-10 00:00:00'), Timestamp('2015-08-10 00:00:00'), Timestamp('2014-06-24 00:00:00'), Timestamp('2013-06-24 00:00:00'), Timestamp('2012-05-10 00:00:00'), Timestamp('2011-04-10 00:00:00')], ('age', 'int64'): [5000000, 5000000, 5000000, 5000000, 5000000, 5000000], ('function', 'object'): ['Leader', 'Espionage', 'Security', 'First Lieutenant', None, 'Battle Station'], ('names', 'object'): ['Optimus', 'bumbl#ebéé  ', 'ironhide&', 'Jazz', 'Megatron', 'Metroplex_)^$'], ('timestamp', 'datetime64[ns]'): [Timestamp('2014-06-24 00:00:00'), Timestamp('2014-06-24 00:00:00'), Timestamp('2014-06-24 00:00:00'), Timestamp('2014-06-24 00:00:00'), Timestamp('2014-06-24 00:00:00'), Timestamp('2014-06-24 00:00:00')], ('weight(t)', 'float64'): [4.3, 2.0, 4.0, 1.8, 5.7, nan]}
    maxDiff = None

    def test_string_clustering_all_double_metaphone(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='double_metaphone')
        expected = { 'Cybertronian': { ('FLS', ''): { 'suggestion': False,
                                   'suggestions': [False],
                                   'suggestions_size': 1,
                                   'total_count': 1},
                    ('TR', ''): { 'suggestion': True,
                                  'suggestions': [True],
                                  'suggestions_size': 1,
                                  'total_count': 5}},
  'Date Type': { ('', ''): { 'suggestion': Timestamp('2016-09-10 00:00:00'),
                             'suggestions': [ Timestamp('2016-09-10 00:00:00'),
                                              Timestamp('2015-08-10 00:00:00'),
                                              Timestamp('2014-06-24 00:00:00'),
                                              Timestamp('2013-06-24 00:00:00'),
                                              Timestamp('2012-05-10 00:00:00'),
                                              Timestamp('2011-04-10 00:00:00')],
                             'suggestions_size': 6,
                             'total_count': 6}},
  'NullType': { ('NN', ''): { 'suggestion': None,
                              'suggestions': [None],
                              'suggestions_size': 1,
                              'total_count': 6}},
  'age': { ('', ''): { 'suggestion': 5000000,
                       'suggestions': [5000000],
                       'suggestions_size': 1,
                       'total_count': 6}},
  'date arrival': { ('', ''): { 'suggestion': '1980/04/10',
                                'suggestions': ['1980/04/10'],
                                'suggestions_size': 1,
                                'total_count': 6}},
  'function': { ('ASPNJ', 'ASPNK'): { 'suggestion': 'Espionage',
                                      'suggestions': ['Espionage'],
                                      'suggestions_size': 1,
                                      'total_count': 1},
                ('FRSTLTNNT', ''): { 'suggestion': 'First Lieutenant',
                                     'suggestions': ['First Lieutenant'],
                                     'suggestions_size': 1,
                                     'total_count': 1},
                ('LTR', ''): { 'suggestion': 'Leader',
                               'suggestions': ['Leader'],
                               'suggestions_size': 1,
                               'total_count': 1},
                ('NN', ''): { 'suggestion': None,
                              'suggestions': [None],
                              'suggestions_size': 1,
                              'total_count': 1},
                ('PTLSTXN', ''): { 'suggestion': 'Battle Station',
                                   'suggestions': ['Battle Station'],
                                   'suggestions_size': 1,
                                   'total_count': 1},
                ('SKRT', ''): { 'suggestion': 'Security',
                                'suggestions': ['Security'],
                                'suggestions_size': 1,
                                'total_count': 1}},
  'height(ft)': { ('', ''): { 'suggestion': -28.0,
                              'suggestions': [-28.0, 17.0, 26.0, 13.0, 300.0],
                              'suggestions_size': 5,
                              'total_count': 5},
                  ('NN', ''): { 'suggestion': nan,
                                'suggestions': [nan],
                                'suggestions_size': 1,
                                'total_count': 1}},
  'last date seen': { ('', ''): { 'suggestion': '2016/09/10',
                                  'suggestions': [ '2016/09/10',
                                                   '2015/08/10',
                                                   '2014/07/10',
                                                   '2013/06/10',
                                                   '2012/05/10',
                                                   '2011/04/10'],
                                  'suggestions_size': 6,
                                  'total_count': 6}},
  'last position seen': { ('', ''): { 'suggestion': '19.442735,-99.201111',
                                      'suggestions': [ '19.442735,-99.201111',
                                                       '10.642707,-71.612534',
                                                       '37.789563,-122.400356',
                                                       '33.670666,-117.841553'],
                                      'suggestions_size': 4,
                                      'total_count': 4},
                          ('NN', ''): { 'suggestion': None,
                                        'suggestions': [None],
                                        'suggestions_size': 1,
                                        'total_count': 2}},
  'names': { ('APTMS', ''): { 'suggestion': 'Optimus',
                              'suggestions': ['Optimus'],
                              'suggestions_size': 1,
                              'total_count': 1},
             ('ARNT', ''): { 'suggestion': 'ironhide&',
                             'suggestions': ['ironhide&'],
                             'suggestions_size': 1,
                             'total_count': 1},
             ('JS', 'AS'): { 'suggestion': 'Jazz',
                             'suggestions': ['Jazz'],
                             'suggestions_size': 1,
                             'total_count': 1},
             ('MKTRN', ''): { 'suggestion': 'Megatron',
                              'suggestions': ['Megatron'],
                              'suggestions_size': 1,
                              'total_count': 1},
             ('MTRPLKSKSKSKSKS', ''): { 'suggestion': 'Metroplex_)^$',
                                        'suggestions': ['Metroplex_)^$'],
                                        'suggestions_size': 1,
                                        'total_count': 1},
             ('PMPLLP', ''): { 'suggestion': 'bumbl#ebéé  ',
                               'suggestions': ['bumbl#ebéé  '],
                               'suggestions_size': 1,
                               'total_count': 1}},
  'rank': { ('', ''): { 'suggestion': 10,
                        'suggestions': [10, 7, 8],
                        'suggestions_size': 3,
                        'total_count': 6}},
  'timestamp': { ('', ''): { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                             'suggestions': [Timestamp('2014-06-24 00:00:00')],
                             'suggestions_size': 1,
                             'total_count': 6}},
  'weight(t)': { ('', ''): { 'suggestion': 4.3,
                             'suggestions': [4.3, 2.0, 4.0, 1.8, 5.7],
                             'suggestions_size': 5,
                             'total_count': 5},
                 ('NN', ''): { 'suggestion': nan,
                               'suggestions': [nan],
                               'suggestions_size': 1,
                               'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_all_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='fingerprint')
        expected = { 'Cybertronian': { 'false': { 'suggestion': False,
                               'suggestions': [False],
                               'suggestions_size': 1,
                               'total_count': 1},
                    'true': { 'suggestion': True,
                              'suggestions': [True],
                              'suggestions_size': 1,
                              'total_count': 5}},
  'Date Type': { '20110410': { 'suggestion': Timestamp('2011-04-10 00:00:00'),
                               'suggestions': [ Timestamp('2011-04-10 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1},
                 '20120510': { 'suggestion': Timestamp('2012-05-10 00:00:00'),
                               'suggestions': [ Timestamp('2012-05-10 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1},
                 '20130624': { 'suggestion': Timestamp('2013-06-24 00:00:00'),
                               'suggestions': [ Timestamp('2013-06-24 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1},
                 '20140624': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                               'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1},
                 '20150810': { 'suggestion': Timestamp('2015-08-10 00:00:00'),
                               'suggestions': [ Timestamp('2015-08-10 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1},
                 '20160910': { 'suggestion': Timestamp('2016-09-10 00:00:00'),
                               'suggestions': [ Timestamp('2016-09-10 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 1}},
  'NullType': { 'none': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 6}},
  'age': { '5000000': { 'suggestion': 5000000,
                        'suggestions': [5000000],
                        'suggestions_size': 1,
                        'total_count': 6}},
  'date arrival': { '19800410': { 'suggestion': '1980/04/10',
                                  'suggestions': ['1980/04/10'],
                                  'suggestions_size': 1,
                                  'total_count': 6}},
  'function': { 'battle station': { 'suggestion': 'Battle Station',
                                    'suggestions': ['Battle Station'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                'espionage': { 'suggestion': 'Espionage',
                               'suggestions': ['Espionage'],
                               'suggestions_size': 1,
                               'total_count': 1},
                'first lieutenant': { 'suggestion': 'First Lieutenant',
                                      'suggestions': ['First Lieutenant'],
                                      'suggestions_size': 1,
                                      'total_count': 1},
                'leader': { 'suggestion': 'Leader',
                            'suggestions': ['Leader'],
                            'suggestions_size': 1,
                            'total_count': 1},
                'none': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 1},
                'security': { 'suggestion': 'Security',
                              'suggestions': ['Security'],
                              'suggestions_size': 1,
                              'total_count': 1}},
  'height(ft)': { '130': { 'suggestion': 13.0,
                           'suggestions': [13.0],
                           'suggestions_size': 1,
                           'total_count': 1},
                  '170': { 'suggestion': 17.0,
                           'suggestions': [17.0],
                           'suggestions_size': 1,
                           'total_count': 1},
                  '260': { 'suggestion': 26.0,
                           'suggestions': [26.0],
                           'suggestions_size': 1,
                           'total_count': 1},
                  '280': { 'suggestion': -28.0,
                           'suggestions': [-28.0],
                           'suggestions_size': 1,
                           'total_count': 1},
                  '3000': { 'suggestion': 300.0,
                            'suggestions': [300.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  'nan': { 'suggestion': nan,
                           'suggestions': [nan],
                           'suggestions_size': 1,
                           'total_count': 1}},
  'last date seen': { '20110410': { 'suggestion': '2011/04/10',
                                    'suggestions': ['2011/04/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                      '20120510': { 'suggestion': '2012/05/10',
                                    'suggestions': ['2012/05/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                      '20130610': { 'suggestion': '2013/06/10',
                                    'suggestions': ['2013/06/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                      '20140710': { 'suggestion': '2014/07/10',
                                    'suggestions': ['2014/07/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                      '20150810': { 'suggestion': '2015/08/10',
                                    'suggestions': ['2015/08/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                      '20160910': { 'suggestion': '2016/09/10',
                                    'suggestions': ['2016/09/10'],
                                    'suggestions_size': 1,
                                    'total_count': 1}},
  'last position seen': { '1064270771612534': { 'suggestion': '10.642707,-71.612534',
                                                'suggestions': [ '10.642707,-71.612534'],
                                                'suggestions_size': 1,
                                                'total_count': 1},
                          '1944273599201111': { 'suggestion': '19.442735,-99.201111',
                                                'suggestions': [ '19.442735,-99.201111'],
                                                'suggestions_size': 1,
                                                'total_count': 1},
                          '33670666117841553': { 'suggestion': '33.670666,-117.841553',
                                                 'suggestions': [ '33.670666,-117.841553'],
                                                 'suggestions_size': 1,
                                                 'total_count': 1},
                          '37789563122400356': { 'suggestion': '37.789563,-122.400356',
                                                 'suggestions': [ '37.789563,-122.400356'],
                                                 'suggestions_size': 1,
                                                 'total_count': 1},
                          'none': { 'suggestion': None,
                                    'suggestions': [None],
                                    'suggestions_size': 1,
                                    'total_count': 2}},
  'names': { 'bumblebee': { 'suggestion': 'bumbl#ebéé  ',
                            'suggestions': ['bumbl#ebéé  '],
                            'suggestions_size': 1,
                            'total_count': 1},
             'ironhide': { 'suggestion': 'ironhide&',
                           'suggestions': ['ironhide&'],
                           'suggestions_size': 1,
                           'total_count': 1},
             'jazz': { 'suggestion': 'Jazz',
                       'suggestions': ['Jazz'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'megatron': { 'suggestion': 'Megatron',
                           'suggestions': ['Megatron'],
                           'suggestions_size': 1,
                           'total_count': 1},
             'metroplex': { 'suggestion': 'Metroplex_)^$',
                            'suggestions': ['Metroplex_)^$'],
                            'suggestions_size': 1,
                            'total_count': 1},
             'optimus': { 'suggestion': 'Optimus',
                          'suggestions': ['Optimus'],
                          'suggestions_size': 1,
                          'total_count': 1}},
  'rank': { '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2},
            '7': { 'suggestion': 7,
                   'suggestions': [7],
                   'suggestions_size': 1,
                   'total_count': 2},
            '8': { 'suggestion': 8,
                   'suggestions': [8],
                   'suggestions_size': 1,
                   'total_count': 2}},
  'timestamp': { '20140624': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                               'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 6}},
  'weight(t)': { '18': { 'suggestion': 1.8,
                         'suggestions': [1.8],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '20': { 'suggestion': 2.0,
                         'suggestions': [2.0],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '40': { 'suggestion': 4.0,
                         'suggestions': [4.0],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '43': { 'suggestion': 4.3,
                         'suggestions': [4.3],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '57': { 'suggestion': 5.7,
                         'suggestions': [5.7],
                         'suggestions_size': 1,
                         'total_count': 1},
                 'nan': { 'suggestion': nan,
                          'suggestions': [nan],
                          'suggestions_size': 1,
                          'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_all_levenshtein(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='levenshtein')
        expected = { 'weight(t)': { '18': { 'suggestion': '18',
                         'suggestions': ['18', '43'],
                         'suggestions_size': 2,
                         'total_count': 6},
                 '20': { 'suggestion': '20',
                         'suggestions': ['20', '40'],
                         'suggestions_size': 2,
                         'total_count': 6},
                 '40': { 'suggestion': '40',
                         'suggestions': ['40', '43'],
                         'suggestions_size': 2,
                         'total_count': 6},
                 '43': { 'suggestion': '43',
                         'suggestions': ['43', '40'],
                         'suggestions_size': 2,
                         'total_count': 6},
                 '57': { 'suggestion': '57',
                         'suggestions': ['57', '43'],
                         'suggestions_size': 2,
                         'total_count': 6},
                 'nan': { 'suggestion': 'nan',
                          'suggestions': ['nan', '43'],
                          'suggestions_size': 2,
                          'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_all_match_rating_codex(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='match_rating_codex')
        # The following value does not represent a correct output of the operation
        expected = self.dict
        self.assertTrue(result.equals(expected, decimal=True, assertion=True))

    def test_string_clustering_all_metaphone(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='metaphone')
        expected = { 'Cybertronian': { 'FLS': { 'suggestion': False,
                             'suggestions': [False],
                             'suggestions_size': 1,
                             'total_count': 1},
                    'TR': { 'suggestion': True,
                            'suggestions': [True],
                            'suggestions_size': 1,
                            'total_count': 5}},
  'Date Type': { '': { 'suggestion': Timestamp('2016-09-10 00:00:00'),
                       'suggestions': [ Timestamp('2016-09-10 00:00:00'),
                                        Timestamp('2015-08-10 00:00:00'),
                                        Timestamp('2014-06-24 00:00:00'),
                                        Timestamp('2013-06-24 00:00:00'),
                                        Timestamp('2012-05-10 00:00:00'),
                                        Timestamp('2011-04-10 00:00:00')],
                       'suggestions_size': 6,
                       'total_count': 6}},
  'NullType': { 'NN': { 'suggestion': None,
                        'suggestions': [None],
                        'suggestions_size': 1,
                        'total_count': 6}},
  'age': { '': { 'suggestion': 5000000,
                 'suggestions': [5000000],
                 'suggestions_size': 1,
                 'total_count': 6}},
  'date arrival': { '': { 'suggestion': '1980/04/10',
                          'suggestions': ['1980/04/10'],
                          'suggestions_size': 1,
                          'total_count': 6}},
  'function': { 'BTL STXN': { 'suggestion': 'Battle Station',
                              'suggestions': ['Battle Station'],
                              'suggestions_size': 1,
                              'total_count': 1},
                'ESPNJ': { 'suggestion': 'Espionage',
                           'suggestions': ['Espionage'],
                           'suggestions_size': 1,
                           'total_count': 1},
                'FRST LTNNT': { 'suggestion': 'First Lieutenant',
                                'suggestions': ['First Lieutenant'],
                                'suggestions_size': 1,
                                'total_count': 1},
                'LTR': { 'suggestion': 'Leader',
                         'suggestions': ['Leader'],
                         'suggestions_size': 1,
                         'total_count': 1},
                'NN': { 'suggestion': None,
                        'suggestions': [None],
                        'suggestions_size': 1,
                        'total_count': 1},
                'SKRT': { 'suggestion': 'Security',
                          'suggestions': ['Security'],
                          'suggestions_size': 1,
                          'total_count': 1}},
  'height(ft)': { '': { 'suggestion': -28.0,
                        'suggestions': [-28.0, 17.0, 26.0, 13.0, 300.0],
                        'suggestions_size': 5,
                        'total_count': 5},
                  'NN': { 'suggestion': nan,
                          'suggestions': [nan],
                          'suggestions_size': 1,
                          'total_count': 1}},
  'last date seen': { '': { 'suggestion': '2016/09/10',
                            'suggestions': [ '2016/09/10',
                                             '2015/08/10',
                                             '2014/07/10',
                                             '2013/06/10',
                                             '2012/05/10',
                                             '2011/04/10'],
                            'suggestions_size': 6,
                            'total_count': 6}},
  'last position seen': { '': { 'suggestion': '19.442735,-99.201111',
                                'suggestions': [ '19.442735,-99.201111',
                                                 '10.642707,-71.612534',
                                                 '37.789563,-122.400356',
                                                 '33.670666,-117.841553'],
                                'suggestions_size': 4,
                                'total_count': 4},
                          'NN': { 'suggestion': None,
                                  'suggestions': [None],
                                  'suggestions_size': 1,
                                  'total_count': 2}},
  'names': { 'BMBLB ': { 'suggestion': 'bumbl#ebéé  ',
                         'suggestions': ['bumbl#ebéé  '],
                         'suggestions_size': 1,
                         'total_count': 1},
             'IRNHT': { 'suggestion': 'ironhide&',
                        'suggestions': ['ironhide&'],
                        'suggestions_size': 1,
                        'total_count': 1},
             'JS': { 'suggestion': 'Jazz',
                     'suggestions': ['Jazz'],
                     'suggestions_size': 1,
                     'total_count': 1},
             'MKTRN': { 'suggestion': 'Megatron',
                        'suggestions': ['Megatron'],
                        'suggestions_size': 1,
                        'total_count': 1},
             'MTRPLKS': { 'suggestion': 'Metroplex_)^$',
                          'suggestions': ['Metroplex_)^$'],
                          'suggestions_size': 1,
                          'total_count': 1},
             'OPTMS': { 'suggestion': 'Optimus',
                        'suggestions': ['Optimus'],
                        'suggestions_size': 1,
                        'total_count': 1}},
  'rank': { '': { 'suggestion': 10,
                  'suggestions': [10, 7, 8],
                  'suggestions_size': 3,
                  'total_count': 6}},
  'timestamp': { '': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                       'suggestions': [Timestamp('2014-06-24 00:00:00')],
                       'suggestions_size': 1,
                       'total_count': 6}},
  'weight(t)': { '': { 'suggestion': 4.3,
                       'suggestions': [4.3, 2.0, 4.0, 1.8, 5.7],
                       'suggestions_size': 5,
                       'total_count': 5},
                 'NN': { 'suggestion': nan,
                         'suggestions': [nan],
                         'suggestions_size': 1,
                         'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_all_ngram_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='ngram_fingerprint')
        expected = { 'Cybertronian': { 'alfalsse': { 'suggestion': False,
                                  'suggestions': [False],
                                  'suggestions_size': 1,
                                  'total_count': 1},
                    'rutrue': { 'suggestion': True,
                                'suggestions': [True],
                                'suggestions_size': 1,
                                'total_count': 5}},
  'Date Type': { '010410112041': { 'suggestion': Timestamp('2011-04-10 00:00:00'),
                                   'suggestions': [ Timestamp('2011-04-10 00:00:00')],
                                   'suggestions_size': 1,
                                   'total_count': 1},
                 '010510122051': { 'suggestion': Timestamp('2012-05-10 00:00:00'),
                                   'suggestions': [ Timestamp('2012-05-10 00:00:00')],
                                   'suggestions_size': 1,
                                   'total_count': 1},
                 '01061320243062': { 'suggestion': Timestamp('2013-06-24 00:00:00'),
                                     'suggestions': [ Timestamp('2013-06-24 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 1},
                 '01061420244062': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                                     'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 1},
                 '01081015205081': { 'suggestion': Timestamp('2015-08-10 00:00:00'),
                                     'suggestions': [ Timestamp('2015-08-10 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 1},
                 '01091016206091': { 'suggestion': Timestamp('2016-09-10 00:00:00'),
                                     'suggestions': [ Timestamp('2016-09-10 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 1}},
  'NullType': { 'nenoon': { 'suggestion': None,
                            'suggestions': [None],
                            'suggestions_size': 1,
                            'total_count': 6}},
  'age': { '0050': { 'suggestion': 5000000,
                     'suggestions': [5000000],
                     'suggestions_size': 1,
                     'total_count': 6}},
  'date arrival': { '00041019418098': { 'suggestion': '1980/04/10',
                                        'suggestions': ['1980/04/10'],
                                        'suggestions_size': 1,
                                        'total_count': 6}},
  'function': { 'addeeaerle': { 'suggestion': 'Leader',
                                'suggestions': ['Leader'],
                                'suggestions_size': 1,
                                'total_count': 1},
                'agesgeionaonpisp': { 'suggestion': 'Espionage',
                                      'suggestions': ['Espionage'],
                                      'suggestions_size': 1,
                                      'total_count': 1},
                'aneneufiieirlinantrssttetlut': { 'suggestion': 'First '
                                                                'Lieutenant',
                                                  'suggestions': [ 'First '
                                                                   'Lieutenant'],
                                                  'suggestions_size': 1,
                                                  'total_count': 1},
                'atbaesioleonsttatitltt': { 'suggestion': 'Battle Station',
                                            'suggestions': ['Battle Station'],
                                            'suggestions_size': 1,
                                            'total_count': 1},
                'cuecitrisetyur': { 'suggestion': 'Security',
                                    'suggestions': ['Security'],
                                    'suggestions_size': 1,
                                    'total_count': 1},
                'nenoon': { 'suggestion': None,
                            'suggestions': [None],
                            'suggestions_size': 1,
                            'total_count': 1}},
  'height(ft)': { '0030': { 'suggestion': 300.0,
                            'suggestions': [300.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '1330': { 'suggestion': 13.0,
                            'suggestions': [13.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '1770': { 'suggestion': 17.0,
                            'suggestions': [17.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '2660': { 'suggestion': 26.0,
                            'suggestions': [26.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '2880': { 'suggestion': -28.0,
                            'suggestions': [-28.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  'anna': { 'suggestion': nan,
                            'suggestions': [nan],
                            'suggestions_size': 1,
                            'total_count': 1}},
  'last date seen': { '010410112041': { 'suggestion': '2011/04/10',
                                        'suggestions': ['2011/04/10'],
                                        'suggestions_size': 1,
                                        'total_count': 1},
                      '010510122051': { 'suggestion': '2012/05/10',
                                        'suggestions': ['2012/05/10'],
                                        'suggestions_size': 1,
                                        'total_count': 1},
                      '01061013203061': { 'suggestion': '2013/06/10',
                                          'suggestions': ['2013/06/10'],
                                          'suggestions_size': 1,
                                          'total_count': 1},
                      '01071014204071': { 'suggestion': '2014/07/10',
                                          'suggestions': ['2014/07/10'],
                                          'suggestions_size': 1,
                                          'total_count': 1},
                      '01081015205081': { 'suggestion': '2015/08/10',
                                          'suggestions': ['2015/08/10'],
                                          'suggestions_size': 1,
                                          'total_count': 1},
                      '01091016206091': { 'suggestion': '2016/09/10',
                                          'suggestions': ['2016/09/10'],
                                          'suggestions_size': 1,
                                          'total_count': 1}},
  'last position seen': { '000312222431353740566377788995': { 'suggestion': '37.789563,-122.400356',
                                                              'suggestions': [ '37.789563,-122.400356'],
                                                              'suggestions_size': 1,
                                                              'total_count': 1},
                          '01111920273542445973929499': { 'suggestion': '19.442735,-99.201111',
                                                          'suggestions': [ '19.442735,-99.201111'],
                                                          'suggestions_size': 1,
                                                          'total_count': 1},
                          '060710121625273442536164707177': { 'suggestion': '10.642707,-71.612534',
                                                              'suggestions': [ '10.642707,-71.612534'],
                                                              'suggestions_size': 1,
                                                              'total_count': 1},
                          '061115173336415355616667707884': { 'suggestion': '33.670666,-117.841553',
                                                              'suggestions': [ '33.670666,-117.841553'],
                                                              'suggestions_size': 1,
                                                              'total_count': 1},
                          'nenoon': { 'suggestion': None,
                                      'suggestions': [None],
                                      'suggestions_size': 1,
                                      'total_count': 2}},
  'names': { 'ateggameonrotr': { 'suggestion': 'Megatron',
                                 'suggestions': ['Megatron'],
                                 'suggestions_size': 1,
                                 'total_count': 1},
             'azjazz': { 'suggestion': 'Jazz',
                         'suggestions': ['Jazz'],
                         'suggestions_size': 1,
                         'total_count': 1},
             'beblbuebeelembum': { 'suggestion': 'bumbl#ebéé  ',
                                   'suggestions': ['bumbl#ebéé  '],
                                   'suggestions_size': 1,
                                   'total_count': 1},
             'dehiidirnhonro': { 'suggestion': 'ironhide&',
                                 'suggestions': ['ironhide&'],
                                 'suggestions_size': 1,
                                 'total_count': 1},
             'etexlemeopplrotr': { 'suggestion': 'Metroplex_)^$',
                                   'suggestions': ['Metroplex_)^$'],
                                   'suggestions_size': 1,
                                   'total_count': 1},
             'immuoppttius': { 'suggestion': 'Optimus',
                               'suggestions': ['Optimus'],
                               'suggestions_size': 1,
                               'total_count': 1}},
  'rank': { '': { 'suggestion': 7,
                  'suggestions': [7, 8],
                  'suggestions_size': 2,
                  'total_count': 4},
            '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2}},
  'timestamp': { '01061420244062': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                                     'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 6}},
  'weight(t)': { '18': { 'suggestion': 1.8,
                         'suggestions': [1.8],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '20': { 'suggestion': 2.0,
                         'suggestions': [2.0],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '40': { 'suggestion': 4.0,
                         'suggestions': [4.0],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '43': { 'suggestion': 4.3,
                         'suggestions': [4.3],
                         'suggestions_size': 1,
                         'total_count': 1},
                 '57': { 'suggestion': 5.7,
                         'suggestions': [5.7],
                         'suggestions_size': 1,
                         'total_count': 1},
                 'anna': { 'suggestion': nan,
                           'suggestions': [nan],
                           'suggestions_size': 1,
                           'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_all_nysiis(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='nysiis')
        # The following value does not represent a correct output of the operation
        expected = self.dict
        self.assertTrue(result.equals(expected, decimal=True, assertion=True))

    def test_string_clustering_all_soundex(self):
        df = self.df
        result = df.string_clustering(cols='*', algorithm='soundex')
        expected = { 'Cybertronian': { 'F420': { 'suggestion': False,
                              'suggestions': [False],
                              'suggestions_size': 1,
                              'total_count': 1},
                    'T600': { 'suggestion': True,
                              'suggestions': [True],
                              'suggestions_size': 1,
                              'total_count': 5}},
  'Date Type': { '2000': { 'suggestion': Timestamp('2016-09-10 00:00:00'),
                           'suggestions': [ Timestamp('2016-09-10 00:00:00'),
                                            Timestamp('2015-08-10 00:00:00'),
                                            Timestamp('2014-06-24 00:00:00'),
                                            Timestamp('2013-06-24 00:00:00'),
                                            Timestamp('2012-05-10 00:00:00'),
                                            Timestamp('2011-04-10 00:00:00')],
                           'suggestions_size': 6,
                           'total_count': 6}},
  'NullType': { 'N500': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 6}},
  'age': { '5000': { 'suggestion': 5000000,
                     'suggestions': [5000000],
                     'suggestions_size': 1,
                     'total_count': 6}},
  'date arrival': { '1000': { 'suggestion': '1980/04/10',
                              'suggestions': ['1980/04/10'],
                              'suggestions_size': 1,
                              'total_count': 6}},
  'function': { 'B342': { 'suggestion': 'Battle Station',
                          'suggestions': ['Battle Station'],
                          'suggestions_size': 1,
                          'total_count': 1},
                'E215': { 'suggestion': 'Espionage',
                          'suggestions': ['Espionage'],
                          'suggestions_size': 1,
                          'total_count': 1},
                'F623': { 'suggestion': 'First Lieutenant',
                          'suggestions': ['First Lieutenant'],
                          'suggestions_size': 1,
                          'total_count': 1},
                'L360': { 'suggestion': 'Leader',
                          'suggestions': ['Leader'],
                          'suggestions_size': 1,
                          'total_count': 1},
                'N500': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 1},
                'S263': { 'suggestion': 'Security',
                          'suggestions': ['Security'],
                          'suggestions_size': 1,
                          'total_count': 1}},
  'height(ft)': { '-000': { 'suggestion': -28.0,
                            'suggestions': [-28.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '1000': { 'suggestion': 17.0,
                            'suggestions': [17.0, 13.0],
                            'suggestions_size': 2,
                            'total_count': 2},
                  '2000': { 'suggestion': 26.0,
                            'suggestions': [26.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  '3000': { 'suggestion': 300.0,
                            'suggestions': [300.0],
                            'suggestions_size': 1,
                            'total_count': 1},
                  'N500': { 'suggestion': nan,
                            'suggestions': [nan],
                            'suggestions_size': 1,
                            'total_count': 1}},
  'last date seen': { '2000': { 'suggestion': '2016/09/10',
                                'suggestions': [ '2016/09/10',
                                                 '2015/08/10',
                                                 '2014/07/10',
                                                 '2013/06/10',
                                                 '2012/05/10',
                                                 '2011/04/10'],
                                'suggestions_size': 6,
                                'total_count': 6}},
  'last position seen': { '1000': { 'suggestion': '19.442735,-99.201111',
                                    'suggestions': [ '19.442735,-99.201111',
                                                     '10.642707,-71.612534'],
                                    'suggestions_size': 2,
                                    'total_count': 2},
                          '3000': { 'suggestion': '37.789563,-122.400356',
                                    'suggestions': [ '37.789563,-122.400356',
                                                     '33.670666,-117.841553'],
                                    'suggestions_size': 2,
                                    'total_count': 2},
                          'N500': { 'suggestion': None,
                                    'suggestions': [None],
                                    'suggestions_size': 1,
                                    'total_count': 2}},
  'names': { 'B514': { 'suggestion': 'bumbl#ebéé  ',
                       'suggestions': ['bumbl#ebéé  '],
                       'suggestions_size': 1,
                       'total_count': 1},
             'I653': { 'suggestion': 'ironhide&',
                       'suggestions': ['ironhide&'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'J200': { 'suggestion': 'Jazz',
                       'suggestions': ['Jazz'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'M236': { 'suggestion': 'Megatron',
                       'suggestions': ['Megatron'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'M361': { 'suggestion': 'Metroplex_)^$',
                       'suggestions': ['Metroplex_)^$'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'O135': { 'suggestion': 'Optimus',
                       'suggestions': ['Optimus'],
                       'suggestions_size': 1,
                       'total_count': 1}},
  'rank': { '1000': { 'suggestion': 10,
                      'suggestions': [10],
                      'suggestions_size': 1,
                      'total_count': 2},
            '7000': { 'suggestion': 7,
                      'suggestions': [7],
                      'suggestions_size': 1,
                      'total_count': 2},
            '8000': { 'suggestion': 8,
                      'suggestions': [8],
                      'suggestions_size': 1,
                      'total_count': 2}},
  'timestamp': { '2000': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                           'suggestions': [Timestamp('2014-06-24 00:00:00')],
                           'suggestions_size': 1,
                           'total_count': 6}},
  'weight(t)': { '1000': { 'suggestion': 1.8,
                           'suggestions': [1.8],
                           'suggestions_size': 1,
                           'total_count': 1},
                 '2000': { 'suggestion': 2.0,
                           'suggestions': [2.0],
                           'suggestions_size': 1,
                           'total_count': 1},
                 '4000': { 'suggestion': 4.3,
                           'suggestions': [4.3, 4.0],
                           'suggestions_size': 2,
                           'total_count': 2},
                 '5000': { 'suggestion': 5.7,
                           'suggestions': [5.7],
                           'suggestions_size': 1,
                           'total_count': 1},
                 'N500': { 'suggestion': nan,
                           'suggestions': [nan],
                           'suggestions_size': 1,
                           'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_double_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='double_metaphone')
        expected = { 'Cybertronian': { ('FLS', ''): { 'suggestion': False,
                                   'suggestions': [False],
                                   'suggestions_size': 1,
                                   'total_count': 1},
                    ('TR', ''): { 'suggestion': True,
                                  'suggestions': [True],
                                  'suggestions_size': 1,
                                  'total_count': 5}},
  'NullType': { ('NN', ''): { 'suggestion': None,
                              'suggestions': [None],
                              'suggestions_size': 1,
                              'total_count': 6}},
  'timestamp': { ('', ''): { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                             'suggestions': [Timestamp('2014-06-24 00:00:00')],
                             'suggestions_size': 1,
                             'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='fingerprint')
        expected = { 'Cybertronian': { 'false': { 'suggestion': False,
                               'suggestions': [False],
                               'suggestions_size': 1,
                               'total_count': 1},
                    'true': { 'suggestion': True,
                              'suggestions': [True],
                              'suggestions_size': 1,
                              'total_count': 5}},
  'NullType': { 'none': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 6}},
  'timestamp': { '20140624': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                               'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                               'suggestions_size': 1,
                               'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_levenshtein(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='levenshtein')
        expected = { 'timestamp': { '20140624': { 'suggestion': '20140624',
                               'suggestions': ['20140624'],
                               'suggestions_size': 1,
                               'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_match_rating_codex(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='match_rating_codex')
        expected = { 'Cybertronian': { 'FLS': { 'suggestion': False,
                             'suggestions': [False],
                             'suggestions_size': 1,
                             'total_count': 1},
                    'TR': { 'suggestion': True,
                            'suggestions': [True],
                            'suggestions_size': 1,
                            'total_count': 5}},
  'NullType': { 'N': { 'suggestion': None,
                       'suggestions': [None],
                       'suggestions_size': 1,
                       'total_count': 6}},
  'timestamp': { '201-24': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                             'suggestions': [Timestamp('2014-06-24 00:00:00')],
                             'suggestions_size': 1,
                             'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='metaphone')
        expected = { 'Cybertronian': { 'FLS': { 'suggestion': False,
                             'suggestions': [False],
                             'suggestions_size': 1,
                             'total_count': 1},
                    'TR': { 'suggestion': True,
                            'suggestions': [True],
                            'suggestions_size': 1,
                            'total_count': 5}},
  'NullType': { 'NN': { 'suggestion': None,
                        'suggestions': [None],
                        'suggestions_size': 1,
                        'total_count': 6}},
  'timestamp': { '': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                       'suggestions': [Timestamp('2014-06-24 00:00:00')],
                       'suggestions_size': 1,
                       'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_ngram_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='ngram_fingerprint')
        expected = { 'Cybertronian': { 'alfalsse': { 'suggestion': False,
                                  'suggestions': [False],
                                  'suggestions_size': 1,
                                  'total_count': 1},
                    'rutrue': { 'suggestion': True,
                                'suggestions': [True],
                                'suggestions_size': 1,
                                'total_count': 5}},
  'NullType': { 'nenoon': { 'suggestion': None,
                            'suggestions': [None],
                            'suggestions_size': 1,
                            'total_count': 6}},
  'timestamp': { '01061420244062': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                                     'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                                     'suggestions_size': 1,
                                     'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_nysiis(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='nysiis')
        expected = { 'Cybertronian': { 'FALS': { 'suggestion': False,
                              'suggestions': [False],
                              'suggestions_size': 1,
                              'total_count': 1},
                    'TR': { 'suggestion': True,
                            'suggestions': [True],
                            'suggestions_size': 1,
                            'total_count': 5}},
  'NullType': { 'NAN': { 'suggestion': None,
                         'suggestions': [None],
                         'suggestions_size': 1,
                         'total_count': 6}},
  'timestamp': { '2014-06-24': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                                 'suggestions': [ Timestamp('2014-06-24 00:00:00')],
                                 'suggestions_size': 1,
                                 'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_multiple_soundex(self):
        df = self.df
        result = df.string_clustering(cols=['NullType', 'Cybertronian', 'timestamp'], algorithm='soundex')
        expected = { 'Cybertronian': { 'F420': { 'suggestion': False,
                              'suggestions': [False],
                              'suggestions_size': 1,
                              'total_count': 1},
                    'T600': { 'suggestion': True,
                              'suggestions': [True],
                              'suggestions_size': 1,
                              'total_count': 5}},
  'NullType': { 'N500': { 'suggestion': None,
                          'suggestions': [None],
                          'suggestions_size': 1,
                          'total_count': 6}},
  'timestamp': { '2000': { 'suggestion': Timestamp('2014-06-24 00:00:00'),
                           'suggestions': [Timestamp('2014-06-24 00:00:00')],
                           'suggestions_size': 1,
                           'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_double_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='double_metaphone')
        expected = { 'rank': { ('', ''): { 'suggestion': 10,
                        'suggestions': [10, 7, 8],
                        'suggestions_size': 3,
                        'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='fingerprint')
        expected = { 'rank': { '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2},
            '7': { 'suggestion': 7,
                   'suggestions': [7],
                   'suggestions_size': 1,
                   'total_count': 2},
            '8': { 'suggestion': 8,
                   'suggestions': [8],
                   'suggestions_size': 1,
                   'total_count': 2}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_levenshtein(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='levenshtein')
        expected = { 'rank': { '10': { 'suggestion': '10',
                    'suggestions': ['10'],
                    'suggestions_size': 1,
                    'total_count': 6},
            '7': { 'suggestion': '7',
                   'suggestions': ['7'],
                   'suggestions_size': 1,
                   'total_count': 6},
            '8': { 'suggestion': '8',
                   'suggestions': ['8'],
                   'suggestions_size': 1,
                   'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_match_rating_codex(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='match_rating_codex')
        expected = { 'rank': { '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2},
            '7': { 'suggestion': 7,
                   'suggestions': [7],
                   'suggestions_size': 1,
                   'total_count': 2},
            '8': { 'suggestion': 8,
                   'suggestions': [8],
                   'suggestions_size': 1,
                   'total_count': 2}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='metaphone')
        expected = { 'rank': { '': { 'suggestion': 10,
                  'suggestions': [10, 7, 8],
                  'suggestions_size': 3,
                  'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_ngram_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='ngram_fingerprint')
        expected = { 'rank': { '': { 'suggestion': 7,
                  'suggestions': [7, 8],
                  'suggestions_size': 2,
                  'total_count': 4},
            '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_nysiis(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='nysiis')
        expected = { 'rank': { '10': { 'suggestion': 10,
                    'suggestions': [10],
                    'suggestions_size': 1,
                    'total_count': 2},
            '7': { 'suggestion': 7,
                   'suggestions': [7],
                   'suggestions_size': 1,
                   'total_count': 2},
            '8': { 'suggestion': 8,
                   'suggestions': [8],
                   'suggestions_size': 1,
                   'total_count': 2}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_numeric_soundex(self):
        df = self.df
        result = df.string_clustering(cols=['rank'], algorithm='soundex')
        expected = { 'rank': { '1000': { 'suggestion': 10,
                      'suggestions': [10],
                      'suggestions_size': 1,
                      'total_count': 2},
            '7000': { 'suggestion': 7,
                      'suggestions': [7],
                      'suggestions_size': 1,
                      'total_count': 2},
            '8000': { 'suggestion': 8,
                      'suggestions': [8],
                      'suggestions_size': 1,
                      'total_count': 2}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_double_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='double_metaphone')
        expected = { 'names': { ('APTMS', ''): { 'suggestion': 'Optimus',
                              'suggestions': ['Optimus'],
                              'suggestions_size': 1,
                              'total_count': 1},
             ('ARNT', ''): { 'suggestion': 'ironhide&',
                             'suggestions': ['ironhide&'],
                             'suggestions_size': 1,
                             'total_count': 1},
             ('JS', 'AS'): { 'suggestion': 'Jazz',
                             'suggestions': ['Jazz'],
                             'suggestions_size': 1,
                             'total_count': 1},
             ('MKTRN', ''): { 'suggestion': 'Megatron',
                              'suggestions': ['Megatron'],
                              'suggestions_size': 1,
                              'total_count': 1},
             ('MTRPLKSKSKSKSKS', ''): { 'suggestion': 'Metroplex_)^$',
                                        'suggestions': ['Metroplex_)^$'],
                                        'suggestions_size': 1,
                                        'total_count': 1},
             ('PMPLLP', ''): { 'suggestion': 'bumbl#ebéé  ',
                               'suggestions': ['bumbl#ebéé  '],
                               'suggestions_size': 1,
                               'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='fingerprint')
        expected = { 'names': { 'bumblebee': { 'suggestion': 'bumbl#ebéé  ',
                            'suggestions': ['bumbl#ebéé  '],
                            'suggestions_size': 1,
                            'total_count': 1},
             'ironhide': { 'suggestion': 'ironhide&',
                           'suggestions': ['ironhide&'],
                           'suggestions_size': 1,
                           'total_count': 1},
             'jazz': { 'suggestion': 'Jazz',
                       'suggestions': ['Jazz'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'megatron': { 'suggestion': 'Megatron',
                           'suggestions': ['Megatron'],
                           'suggestions_size': 1,
                           'total_count': 1},
             'metroplex': { 'suggestion': 'Metroplex_)^$',
                            'suggestions': ['Metroplex_)^$'],
                            'suggestions_size': 1,
                            'total_count': 1},
             'optimus': { 'suggestion': 'Optimus',
                          'suggestions': ['Optimus'],
                          'suggestions_size': 1,
                          'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_levenshtein(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='levenshtein')
        expected = { 'names': { 'bumblebee': { 'suggestion': 'bumblebee',
                            'suggestions': ['bumblebee', 'ironhide'],
                            'suggestions_size': 2,
                            'total_count': 6},
             'ironhide': { 'suggestion': 'ironhide',
                           'suggestions': ['ironhide', 'optimus'],
                           'suggestions_size': 2,
                           'total_count': 6},
             'jazz': { 'suggestion': 'jazz',
                       'suggestions': ['jazz', 'optimus'],
                       'suggestions_size': 2,
                       'total_count': 6},
             'megatron': { 'suggestion': 'megatron',
                           'suggestions': ['megatron', 'metroplex'],
                           'suggestions_size': 2,
                           'total_count': 6},
             'metroplex': { 'suggestion': 'metroplex',
                            'suggestions': ['metroplex', 'megatron'],
                            'suggestions_size': 2,
                            'total_count': 6},
             'optimus': { 'suggestion': 'optimus',
                          'suggestions': ['optimus', 'ironhide'],
                          'suggestions_size': 2,
                          'total_count': 6}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_match_rating_codex(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='match_rating_codex')
        # The following value does not represent a correct output of the operation
        expected = self.dict
        self.assertTrue(result.equals(expected, decimal=True, assertion=True))

    def test_string_clustering_string_metaphone(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='metaphone')
        expected = { 'names': { 'BMBLB ': { 'suggestion': 'bumbl#ebéé  ',
                         'suggestions': ['bumbl#ebéé  '],
                         'suggestions_size': 1,
                         'total_count': 1},
             'IRNHT': { 'suggestion': 'ironhide&',
                        'suggestions': ['ironhide&'],
                        'suggestions_size': 1,
                        'total_count': 1},
             'JS': { 'suggestion': 'Jazz',
                     'suggestions': ['Jazz'],
                     'suggestions_size': 1,
                     'total_count': 1},
             'MKTRN': { 'suggestion': 'Megatron',
                        'suggestions': ['Megatron'],
                        'suggestions_size': 1,
                        'total_count': 1},
             'MTRPLKS': { 'suggestion': 'Metroplex_)^$',
                          'suggestions': ['Metroplex_)^$'],
                          'suggestions_size': 1,
                          'total_count': 1},
             'OPTMS': { 'suggestion': 'Optimus',
                        'suggestions': ['Optimus'],
                        'suggestions_size': 1,
                        'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_ngram_fingerprint(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='ngram_fingerprint')
        expected = { 'names': { 'ateggameonrotr': { 'suggestion': 'Megatron',
                                 'suggestions': ['Megatron'],
                                 'suggestions_size': 1,
                                 'total_count': 1},
             'azjazz': { 'suggestion': 'Jazz',
                         'suggestions': ['Jazz'],
                         'suggestions_size': 1,
                         'total_count': 1},
             'beblbuebeelembum': { 'suggestion': 'bumbl#ebéé  ',
                                   'suggestions': ['bumbl#ebéé  '],
                                   'suggestions_size': 1,
                                   'total_count': 1},
             'dehiidirnhonro': { 'suggestion': 'ironhide&',
                                 'suggestions': ['ironhide&'],
                                 'suggestions_size': 1,
                                 'total_count': 1},
             'etexlemeopplrotr': { 'suggestion': 'Metroplex_)^$',
                                   'suggestions': ['Metroplex_)^$'],
                                   'suggestions_size': 1,
                                   'total_count': 1},
             'immuoppttius': { 'suggestion': 'Optimus',
                               'suggestions': ['Optimus'],
                               'suggestions_size': 1,
                               'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))

    def test_string_clustering_string_nysiis(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='nysiis')
        # The following value does not represent a correct output of the operation
        expected = self.dict
        self.assertTrue(result.equals(expected, decimal=True, assertion=True))

    def test_string_clustering_string_soundex(self):
        df = self.df
        result = df.string_clustering(cols=['names'], algorithm='soundex')
        expected = { 'names': { 'B514': { 'suggestion': 'bumbl#ebéé  ',
                       'suggestions': ['bumbl#ebéé  '],
                       'suggestions_size': 1,
                       'total_count': 1},
             'I653': { 'suggestion': 'ironhide&',
                       'suggestions': ['ironhide&'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'J200': { 'suggestion': 'Jazz',
                       'suggestions': ['Jazz'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'M236': { 'suggestion': 'Megatron',
                       'suggestions': ['Megatron'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'M361': { 'suggestion': 'Metroplex_)^$',
                       'suggestions': ['Metroplex_)^$'],
                       'suggestions_size': 1,
                       'total_count': 1},
             'O135': { 'suggestion': 'Optimus',
                       'suggestions': ['Optimus'],
                       'suggestions_size': 1,
                       'total_count': 1}}}
        self.assertTrue(results_equal(result, expected, decimal=5, assertion=True))


class TestStringclusteringDask(TestStringclusteringPandas):
    config = {'engine': 'dask', 'n_partitions': 1}


class TestStringclusteringPartitionDask(TestStringclusteringPandas):
    config = {'engine': 'dask', 'n_partitions': 2}


try:
    import cudf # pyright: reportMissingImports=false
except:
    pass
else:
    class TestStringclusteringCUDF(TestStringclusteringPandas):
        config = {'engine': 'cudf'}


try:
    import dask_cudf # pyright: reportMissingImports=false
except:
    pass
else:
    class TestStringclusteringDC(TestStringclusteringPandas):
        config = {'engine': 'dask_cudf', 'n_partitions': 1}


try:
    import dask_cudf # pyright: reportMissingImports=false
except:
    pass
else:
    class TestStringclusteringPartitionDC(TestStringclusteringPandas):
        config = {'engine': 'dask_cudf', 'n_partitions': 2}


try:
    import pyspark # pyright: reportMissingImports=false
except:
    pass
else:
    class TestStringclusteringSpark(TestStringclusteringPandas):
        config = {'engine': 'spark'}


try:
    import vaex # pyright: reportMissingImports=false
except:
    pass
else:
    class TestStringclusteringVaex(TestStringclusteringPandas):
        config = {'engine': 'vaex'}
